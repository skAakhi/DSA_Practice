// Online C compiler to run C program online


Linear Search:


#include <stdio.h>
#include <stdlib.h>

void main()
{
    
 int a[]={1,2,3,4,4,5,6,9};
 int target=1;
 int result=binary(a,target);
    printf("%d",result);
}



int binary(int a[],int target) {
 
//  int a[]={1,2,3,4,4,5,6,9};
//  int target=5;
 int c=0;
 
//  for(int i=0;i<8;i++)
//  {    c++;
//      if(target==a[i])
//      {
//          printf("Found at index %d and value is %d\n",i,a[i]);
//          break;
//      }
     
//  }
//  printf("Number of iteration it takes %d :",c);


  
    return 0;
}











Binary  Search




// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>
int binary(int a[], int target);
int main()
{
    
 int a[]={1,2,3,4,4,5,6,9};
 int target=9;
 int result=binary(a,target);
    printf("%d",result);
}



int binary(int a[],int target) {

 int c=0;
 

int left=0,right=7;

while(left<=right)
{
    c++;
    int mid=(left+right)/2;
    
    if(a[mid]==target){
   printf("Number of iterations takes place %d : ",c);
    return a[mid];
    }
    
    else if(a[mid]<target){
    left=mid+1;}
    
    else if(a[mid]>target){
    right=mid-1;}
    else{
    printf("Not valid");}
    
    
}
 
 
  
    return 0;
}






















Efficient way with recursive call :
--------------------------------------------------------------------------------------------------------------------------
// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>
int binary(int a[],int left,int right, int target);
int main()
{
    
 int a[]={1,2,3,4,4,5,6,9};
 int target=3;
 int left=0,right=7;
 int result=binary(a,left,right,target);
    printf("%d",result);
}



int binary(int a[],int left,int right,int target) {

 int c=0;
 

//int left=0,right=7;

while(left<=right)
{
    c++;
    int mid=(left+right)/2;
    
    if(a[mid]==target){
   printf("Number of iterations takes place %d : ",c);
    return a[mid];
    }
    
    else if(a[mid]<target){
   // left=mid+1;
   return binary(a,mid+1,right,target);
        
    }
    else{
       return binary(a,left,mid-1,target);
    //printf("Not valid");}
    
    
}
 
 
}
    return 0;
}